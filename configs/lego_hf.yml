# experiment name
expname: lego_hf
# where to store ckpts and logs
basedir: ./logs
# input data directory
datadir: ./dataset/nerf_synthetic/lego


# for testing
# do not optimize, reload weights and render out render_poses path
render_only: False

## training options
# model
model_name: NeRF
#layers in network
netdepth: 4
# channels per layer
netwidth: 128
# layers in fine network
netdepth_fine: 4
# channels per layer in fine network
netwidth_fine: 128
# skip connection for position input
skips: 1

# batch size (number of random rays per gradient step)
N_rand: 1024

# learning rate
lrate: 0.005
# xponential learning rate decay (in 1000 steps)
lrate_decay: 500
# number of rays processed in parallel, decrease if running out of memory 
chunk: 32768
# number of pts sent through network in parallel, decrease if running out of memory
netchunk: 65536
# only take random rays from 1 image at a time
no_batching: True
#do not reload weights from saved ckpt
no_reload: True
#specific weights npy file to reload for coarse network
ft_path: None


## rendering options
# number of coarse samples per ray
N_samples: 64
# number of additional fine samples per ray
N_importance: 128
# set to 0. for no jitter, 1. for jitter
perturb: 1.0
# use full 5D input instead of 3D
use_viewdirs: True
# set 0 for default positional encoding, -1 for none
i_embed: 0
# log2 of max freq for positional encoding (3D location)
multires: 10
# log2 of max freq for positional encoding (2D direction)
multires_views: 4
# std dev of noise added to regularize sigma_a output, 1e0 recommended
raw_noise_std: 0.0 
# render the test set instead of render_poses path
render_test: False
# downsampling factor to speed up rendering, set 4 or 8 for fast preview
render_factor: 0


# training options
precrop_iters: 0
precrop_frac: 0.5

# dataset options
dataset_type: blender
testskip: 8

## deepvoxels flags
shape: greek

## blender flags
white_bkgd: True
half_res: True

## llff flags
factor: 8
no_ndc: False
lindisp: False
spherify: False
llffhold: 8

# logging/saving options
i_iters: 50000
i_print: 100
i_img: 500
i_weights: 25000
i_testset: 5000
i_valset: 1000
i_video: 25000
